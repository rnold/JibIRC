/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JibIRC.java
 *
 * Created on 29-Aug-2010, 1:07:44 PM
 */
package jibIRC;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.Timer;
import java.util.Hashtable;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author Owner
 */
public class JibIRC extends javax.swing.JFrame {

    Timer timer;
    IRCHandler handler;
    DefaultListModel channels;
    DefaultListModel currentChannelUsers;
    String activeChannel;
    String nick;
    String server;
    Hashtable<String, Channel> channelBoxes;
    Hashtable<String, JList> usersList;

    /**
     * Creates new form JibIRC
     */
    public JibIRC(IRCHandler handler) {
        this.handler = handler;
        this.addWindowListener(new Quitter());
        initComponents();
        channelBoxes = new Hashtable<String, Channel>();
        usersList = new Hashtable<String, JList>();
        getContentPane().remove(channelPanel);

    }

    class Quitter extends WindowAdapter {
        
        @Override
        public void windowClosing(WindowEvent e) {
            if (handler.isInitialized()) {
                handler.quit();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        channelPanel = new javax.swing.JPanel();
        inputBox = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        channelList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        textNick = new javax.swing.JTextField();
        textName = new javax.swing.JTextField();
        textServer = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textPort = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBoxActionPerformed(evt);
            }
        });

        channels = new javax.swing.DefaultListModel();
        channelList.setModel(channels);
        channelList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                channelListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(channelList);

        jPanel1.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout channelPanelLayout = new javax.swing.GroupLayout(channelPanel);
        channelPanel.setLayout(channelPanelLayout);
        channelPanelLayout.setHorizontalGroup(
            channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(channelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(channelPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(107, 107, 107)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        channelPanelLayout.setVerticalGroup(
            channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(channelPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        textNick.setText("JibTest");
        textNick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNickActionPerformed(evt);
            }
        });

        textName.setText("rnold");
        textName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNameActionPerformed(evt);
            }
        });

        textServer.setText("irc.relic.net");

        jLabel1.setText("Nick");

        jLabel2.setText("Real Name");

        jLabel3.setText("Server");

        jLabel4.setText("Port");

        textPort.setText("6667");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(25, 25, 25)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectButton)
                    .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(textPort)
                        .addComponent(textServer, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                        .addComponent(textName)
                        .addComponent(textNick)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textNick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(connectButton)
                .addContainerGap(141, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(channelPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(loginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(channelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(loginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    

    
    private void textNickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNickActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNickActionPerformed

    private void textNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNameActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        handler.connect(textServer.getText(), Integer.parseInt(textPort.getText()), textNick.getText(), textName.getText());
        nick = textNick.getText();
        server = textServer.getText();
        switchPanels();
        timer = new Timer(30, new ServerMessageController(handler, this));
        inputBox.addActionListener(new InputMessageController(handler, this));
        timer.start();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void channelListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_channelListValueChanged
        int selectedIndex = channelList.getSelectedIndex();
        if(selectedIndex >= 0){
            activeChannel = (String) channels.get(channelList.getSelectedIndex());
            CardLayout channelLayout = (CardLayout)jPanel1.getLayout();
            channelLayout.show(jPanel1, activeChannel);
            getContentPane().revalidate();
            getContentPane().repaint();
        }
    }//GEN-LAST:event_channelListValueChanged

    private void inputBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBoxActionPerformed

    }//GEN-LAST:event_inputBoxActionPerformed

    
    private void switchPanels() {
        getContentPane().remove(loginPanel);
        getContentPane().add(channelPanel);
        getContentPane().revalidate();
        getContentPane().repaint();
    }

    public void joinPublicChannel(String channelName){
        Channel channel = new PublicChannel(channelName, this, handler);
        joinChannel(channel);
    }
    
    public void joinPrivateMessage(String channelName){
        Channel channel = new PrivateMessage(channelName, this, handler);
        joinChannel(channel);
    }
    
    public void joinChannel(Channel channel) {
        createChannel(channel);
        switchToChannel(channel.toString());

        String welcomeMessage = "now talking in " + channel + "\n";
        channel.addMessage(welcomeMessage);
    } 
    
    public void createChannel(Channel channel){
        if(channelExists(channel.toString())){
            return;
        }
        //create channel
        channelBoxes.put(channel.toString(), channel);
        jPanel1.add(channel, channel.toString());
        
        //add channel to list
        channels.add(channels.getSize(), channel.toString());
    }
    

    
    public void switchToChannel(String channelName){
        int index = channels.indexOf(channelName);
        channelList.setSelectedIndex(index);
    }
    
    public String getActiveChannelName(){
        return activeChannel;
    }
    
    public boolean channelExists(String channelName){
        return channelBoxes.get(channelName) != null;
    }
    
    public void leaveChannel(String channelName) {
        usersList.remove(channelName);
        channelBoxes.remove(channelName);
        channels.removeElement(channelName);
        if(channels.size() > 0 && channelList.getSelectedIndex() == -1){
            channelList.setSelectedIndex(0);
        }
    }
    
    public void addUser(String channelName, String username){
        Channel currentChannel = channelBoxes.get(channelName);
        currentChannel.addUser(username);

    }
    
    public void removeUser(String channelName, String username){
        Channel currentChannel = channelBoxes.get(channelName);
        if(currentChannel.userExists(username)){
            currentChannel.removeUser(username);
        }else{
            System.err.println("removeUser called when user doesn't exist: This should never happen!");
        }
    }
    
    public void addMessage(String channelName, String message, String user){
        Channel channel = channelBoxes.get(channelName);
        channel.addMessage(user + ": " + message + "\n");
    }
    
    public String getNick(){
        return nick;
    }
    
    public void putMessage(String message){
        //channel.messageBox.append(message);
    }
    
    public void resetInputBox(){
        inputBox.setText("");
    }
    
    public String getInput(){
        return inputBox.getText();
    }
    
    public void printChannels(){
        Component[] channelArray = jPanel1.getComponents();
        for(int i = 0; i < channelArray.length; i++){
            System.out.println(channelArray[i]);
        }
    }



    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList channelList;
    private javax.swing.JPanel channelPanel;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField inputBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textNick;
    private javax.swing.JTextField textPort;
    private javax.swing.JTextField textServer;
    // End of variables declaration//GEN-END:variables
}

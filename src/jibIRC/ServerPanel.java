/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jibIRC;

import java.awt.CardLayout;
import java.awt.Image;
import java.util.HashMap;
import javax.swing.DefaultListModel;

/**
 *
 * @author Welcome
 */
public class ServerPanel extends javax.swing.JPanel {
    JibIRC irc;
    IRCHandler handler;
    HashMap<String, Channel> channelBoxes;
    DefaultListModel channels;
    String activeChannel;
    String serverName;
    String nick;
    /**
     * Creates new form ServerPanel
     */
    public ServerPanel(JibIRC irc, IRCHandler handler, String serverName, String nick) {
        this.irc = irc;
        this.handler = handler;
        this.serverName = serverName;
        this.nick = nick;
        initComponents();
        channelBoxes = new HashMap<String, Channel>();
        inputBox.addActionListener(new InputMessageController(handler, this));
        disconnectButton.addActionListener(new DisconnectController(handler, irc, this));
    }
    
    public void joinPublicChannel(String channelName) {
        Channel channel = new PublicChannel(channelName, handler, this);
        joinChannel(channel);
    }

    public void joinPrivateMessage(String channelName) {
        Channel channel = new PrivateMessage(channelName, handler, this);
        joinChannel(channel);
    }
    
    public void joinChannel(Channel channel) {
        createChannel(channel);
        switchToChannel(channel.toString());

        String welcomeMessage = "now talking in " + channel + "\n";
        channel.addMessage(welcomeMessage);
    }
    
    public void createChannel(Channel channel) {
        if (channelExists(channel.toString())) {
            return;
        }
        //create channel
        channelBoxes.put(channel.toString(), channel);
        channelPanel.add(channel, channel.toString());

        //add channel to list
        channels.add(channels.getSize(), channel.toString());
    }

    public void switchToChannel(String channelName) {
        int index = channels.indexOf(channelName);
        channelList.setSelectedIndex(index);
    }
    
    public void leaveChannel(String channelName) {
        Channel channel = channelBoxes.get(channelName);
        channelPanel.remove(channel);
        channelBoxes.remove(channelName);
        channels.removeElement(channelName);
        if (channels.size() > 0 && channelList.getSelectedIndex() == -1) {
            channelList.setSelectedIndex(0);
        }
    }
    
    public boolean channelExists(String channelName) {
        return channelBoxes.get(channelName) != null;
    }
    
    public String getActiveChannelName() {
        return activeChannel;
    }
    
    public void addUser(String channelName, User user) {
        Channel currentChannel = channelBoxes.get(channelName);
        currentChannel.addUser(user);

    }

    public void removeUser(String channelName, User user) {
        Channel currentChannel = channelBoxes.get(channelName);
        if (currentChannel.userExists(user)) {
            currentChannel.removeUser(user);
        } else {
            System.err.println("removeUser called when user doesn't exist: This should never happen!");
        }
    }
    
    public void removeUserFromAllChannels(User user){
        for(Channel channel : channelBoxes.values()){
            channel.removeUser(user);
        }
    }
    
    public void changeNickForAllChannels(User user, String newUsername){
        for(Channel channel : channelBoxes.values()){
            channel.changeUserNick(user, newUsername);
        }
        
    }
    
    public void alertUser() {
        Image image = irc.getAlertIcon();
        irc.setIconImage(image);

    }

    public void resetInputBox() {
        inputBox.setText("");
    }

    public String getInput() {
        return inputBox.getText();
    }
    
    public void addMessage(String channelName, String message, String user) {
        Channel channel = channelBoxes.get(channelName);
        channel.addMessage(user + ": " + message + "\n");
    }
    
    public String getServerName(){
        return serverName;
    }
    
    public String getNick(){
        return nick;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        channelPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        channelList = new javax.swing.JList();
        inputBox = new javax.swing.JTextField();
        disconnectButton = new javax.swing.JButton();

        channelPanel.setLayout(new java.awt.CardLayout());

        channels = new javax.swing.DefaultListModel();
        channelList.setModel(channels);
        channelList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                channelListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(channelList);

        inputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBoxActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect from server: " + serverName);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(channelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(107, 107, 107))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(channelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(disconnectButton)
                .addGap(32, 32, 32))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void channelListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_channelListValueChanged
        int selectedIndex = channelList.getSelectedIndex();
        if (selectedIndex >= 0) {
            activeChannel = (String) channels.get(channelList.getSelectedIndex());
            CardLayout channelLayout = (CardLayout) channelPanel.getLayout();
            channelLayout.show(channelPanel, activeChannel);
            this.revalidate();
            this.repaint();
        }
    }//GEN-LAST:event_channelListValueChanged

    private void inputBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBoxActionPerformed

    }//GEN-LAST:event_inputBoxActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_disconnectButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList channelList;
    private javax.swing.JPanel channelPanel;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JTextField inputBox;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
